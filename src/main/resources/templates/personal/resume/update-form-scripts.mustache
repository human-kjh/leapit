<script>
    // 공통 추가 함수 (template 복제해서 추가)
    function addItem(containerSelector, templateId) {
        let container = document.querySelector(containerSelector);
        let template = document.querySelector(templateId);
        let clone = template.content.cloneNode(true);
        container.appendChild(clone);
    }

    // 삭제 버튼 처리 (동적 요소 포함)
    document.addEventListener('click', function(event) {
        if (event.target.classList.contains('removeItemBtn')) {
            event.target.closest('.linkItem, .educationItem, .experienceItem, .projectItem, .trainingItem, .etcItem').remove();
        }
    });

    // updateResume 함수 (모든 데이터 수집해서 전송)
    async function updateResume() {
        let resumeId = document.getElementById('resumeId').value;

        let requestBody = {
            title: document.querySelector("#title").value,
            summary: document.querySelector("#summary").value,
            selfIntroduction: document.querySelector("#selfIntroduction").value,
            isPublic: document.querySelector("#resumeToggle")?.checked ?? true,
            positionType: document.querySelector("select[name='positionType']").value,
            resumeTechStacks: Array.from(document.querySelectorAll(".tech-checkbox:checked")).map(cb => cb.value),

            links: Array.from(document.querySelectorAll('.linkItem')).map(item => ({
                id: item.querySelector('.link-id')?.value || null,
                title: item.querySelectorAll('input')[1].value,
                url: item.querySelectorAll('input')[2].value
            })),

            educations: Array.from(document.querySelectorAll('.educationItem')).map(item => ({
                id: item.querySelector('.education-id')?.value || null,
                graduationDate: item.querySelector('input[type="month"]')?.value ? item.querySelector('input[type="month"]').value + "-01" : null,
                isDropout: item.querySelectorAll('input')[1].checked,
                schoolName: item.querySelectorAll('input')[2].value,
                major: item.querySelectorAll('input')[3].value,
                educationLevel: item.querySelectorAll('select')[0].value,
                gpa: item.querySelectorAll('input')[4].value,
                gpaScale: item.querySelectorAll('select')[1].value
            })),

            experiences: Array.from(document.querySelectorAll('.experienceItem')).map(item => ({
                id: item.querySelector('.experience-id')?.value || null,
                startDate: item.querySelectorAll('input')[0].value,
                endDate: item.querySelectorAll('input')[1].value,
                isEmployed: item.querySelectorAll('input')[2].checked,
                companyName: item.querySelectorAll('input')[3].value,
                summary: item.querySelectorAll('input')[4].value,
                position: item.querySelectorAll('input')[5].value,
                responsibility: item.querySelector('textarea').value,
                techStacks: Array.from(item.querySelectorAll('.experience-tech-checkbox:checked')).map(cb => cb.value)
            })),

            projects: Array.from(document.querySelectorAll('.projectItem')).map(item => ({
                id: item.querySelector('.project-id')?.value || null,
                startDate: item.querySelectorAll('input')[0].value,
                endDate: item.querySelectorAll('input')[1].value,
                isOngoing: item.querySelectorAll('input')[2].checked,
                title: item.querySelectorAll('input')[3].value,
                summary: item.querySelectorAll('input')[4].value,
                description: item.querySelector('textarea').value,
                repositoryUrl: item.querySelectorAll('input')[5].value,
                techStacks: Array.from(item.querySelectorAll('.project-tech-checkbox:checked')).map(cb => cb.value)
            })),

            trainings: Array.from(document.querySelectorAll('.trainingItem')).map(item => ({
                id: item.querySelector('.training-id')?.value || null,
                startDate: item.querySelectorAll('input')[0].value,
                endDate: item.querySelectorAll('input')[1].value,
                isOngoing: item.querySelectorAll('input')[2].checked,
                courseName: item.querySelectorAll('input')[3].value,
                institutionName: item.querySelectorAll('input')[4].value,
                description: item.querySelector('textarea').value,
                techStacks: Array.from(item.querySelectorAll('.training-tech-checkbox:checked')).map(cb => cb.value)
            })),

            etcs: Array.from(document.querySelectorAll('.etcItem')).map(item => ({
                id: item.querySelector('.etc-id')?.value || null,
                startDate: item.querySelectorAll('input')[0].value,
                endDate: item.querySelectorAll('input')[1].value,
                hasEndDate: item.querySelectorAll('input')[2].checked,
                title: item.querySelectorAll('input')[3].value,
                etcType: item.querySelector('select').value,
                institutionName: item.querySelectorAll('input')[4].value,
                description: item.querySelector('textarea').value
            }))
        };

        console.log("업데이트 전송 데이터:", requestBody);

        try {
            let response = await fetch(`/resume/${resumeId}/update`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(requestBody)
            });

            if (response.ok) {
                alert('이력서가 성공적으로 수정되었습니다.');
                location.href = `/resume/${resumeId}`;
            } else {
                let errorBody = await response.json();
                alert('이력서 수정 실패: ' + (errorBody.msg || '알 수 없는 오류'));
            }
        } catch (error) {
            console.error('에러 발생', error);
            alert('서버 연결에 실패했습니다.');
        }
    }

    // 기술스택 선택 시 버튼에 표시 업데이트 (이력서 techStack용)
    document.addEventListener('DOMContentLoaded', () => {
        updateTechStackButton();
        updateAllDropdownSelectedText();
    });

    function updateTechStackButton() {
        let checkboxes = document.querySelectorAll('.tech-checkbox');
        let displayBtn = document.getElementById('selectedTechStacksBtn');

        function refreshDisplay() {
            let selected = Array.from(checkboxes)
                    .filter(cb => cb.checked)
                    .map(cb => cb.nextElementSibling.innerText);
            displayBtn.innerText = selected.length > 0 ? selected.join(', ') : '기술스택을 선택하세요';
        }

        checkboxes.forEach(cb => {
            cb.addEventListener('change', refreshDisplay);
        });

        refreshDisplay(); // 초기 실행
    }

    // 경력, 프로젝트, 교육 기술스택 드롭다운 버튼에도 초기 선택된 값 표시
    function updateAllDropdownSelectedText() {
        document.querySelectorAll('.experienceItem').forEach(item => {
            let container = item.querySelector('.dropdown');
            let button = container.querySelector('button.form-select');
            let selected = Array.from(container.querySelectorAll('.experience-tech-checkbox:checked'))
                    .map(cb => cb.nextElementSibling.innerText);

            if (selected.length > 0) {
                button.innerText = selected.join(', ') + ' 선택됨';
            } else {
                button.innerText = '기술스택을 선택하세요';
            }
        });

        document.querySelectorAll('.projectItem').forEach(item => {
            let container = item.querySelector('.dropdown');
            let button = container.querySelector('button.form-select');
            let selected = Array.from(container.querySelectorAll('.project-tech-checkbox:checked'))
                    .map(cb => cb.nextElementSibling.innerText);

            if (selected.length > 0) {
                button.innerText = selected.join(', ') + ' 선택됨';
            } else {
                button.innerText = '기술스택을 선택하세요';
            }
        });

        document.querySelectorAll('.trainingItem').forEach(item => {
            let container = item.querySelector('.dropdown');
            let button = container.querySelector('button.form-select');
            let selected = Array.from(container.querySelectorAll('.training-tech-checkbox:checked'))
                    .map(cb => cb.nextElementSibling.innerText);

            if (selected.length > 0) {
                button.innerText = selected.join(', ') + ' 선택됨';
            } else {
                button.innerText = '기술스택을 선택하세요';
            }
        });
    }

    // 동적 추가된 항목에도 적용할 수 있게 클릭 이벤트로 갱신
    document.addEventListener('click', function(event) {
        if (event.target.classList.contains('experience-tech-checkbox') ||
                event.target.classList.contains('project-tech-checkbox') ||
                event.target.classList.contains('training-tech-checkbox')) {

            let container = event.target.closest('.dropdown');
            let button = container.querySelector('button.form-select');
            let selected = Array.from(container.querySelectorAll('input:checked')).map(cb => cb.nextElementSibling.innerText);

            if (selected.length > 0) {
                button.innerText = selected.join(', ') + ' 선택됨';
            } else {
                button.innerText = '기술스택을 선택하세요';
            }
        }
    });
</script>
